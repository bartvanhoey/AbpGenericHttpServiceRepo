@* "NewBook": "New book", *@
@page "/books"
@attribute [Authorize(BookStoreAbpApiPermissions.Books.Default)]
@using BookStoreAbpApi.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp
@using Volo.Abp.Application.Dtos
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.AspNetCore.Components.Web
@using BookStoreAbpApi.Books
@using BookStoreAbpApi.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<BookStoreAbpApiResource> L
@inject AbpBlazorMessageLocalizerHelper<BookStoreAbpApiResource> LH
@inherits AbpCrudPageBase<IBookAppService, BookDto, Guid, PagedAndSortedResultRequestDto, CreateBookDto, UpdateBookDto>

<Card>
  <CardHeader>
    <Row Class="justify-content-between">
      <Column ColumnSize="ColumnSize.IsAuto">
        <h2>@L["Books"]</h2>
      </Column>
      <Column ColumnSize="ColumnSize.IsAuto">
        @if (HasCreatePermission)
        {
          <Button Color="Color.Primary" Clicked="OpenCreateModalAsync">@L["BookNew"]</Button>
        }
      </Column>
    </Row>
  </CardHeader>

  <CardBody>
    <DataGrid TItem="BookDto" Data="Entities" ReadData="OnDataGridReadAsync" TotalItems="TotalCount" ShowPager="true"
      PageSize="PageSize">
      <DataGridColumns>
        <DataGridEntityActionsColumn TItem="BookDto" @ref="@EntityActionsColumn">
          <DisplayTemplate>
            <EntityActions TItem="BookDto" EntityActionsColumn="@EntityActionsColumn">
              <EntityAction TItem="BookDto" Text="@L["Edit"]" Visible="HasUpdatePermission"
                Clicked="() => OpenEditModalAsync(context)" />
              <EntityAction TItem="BookDto" Text="@L["Delete"]" Visible="HasDeletePermission"
                Clicked="() => DeleteEntityAsync(context)"
                ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
            </EntityActions>
          </DisplayTemplate>
        </DataGridEntityActionsColumn>
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Name)" Caption="@L["BookName"]"></DataGridColumn>

        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.AuthorName)" Caption="@L["BookAuthorName"]">
        </DataGridColumn>
        @* "BookAuthorName": "AuthorName", *@

        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Type)" Caption="@L["BookType"]">
          <DisplayTemplate>
            @L[$"{context.Type}"]
          </DisplayTemplate>
        </DataGridColumn>
        @* "BookType": "Type", *@

        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.PublishDate)" Caption="@L["BookPublishDate"]">
          <DisplayTemplate>
            @context.PublishDate.ToShortDateString()
          </DisplayTemplate>
        </DataGridColumn>
        @* "BookPublishDate": "BookPublishDate", *@

        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Price)" Caption="@L["BookPrice"]"></DataGridColumn>
        @* "BookPrice": "Price", *@


        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.CreationTime)" Caption="@L["BookCreationTime"]">
          <DisplayTemplate>
            @context.CreationTime.ToLongDateString()
          </DisplayTemplate>
        </DataGridColumn>
        @* "BookCreationTime": "CreationTime", *@



        @* "BookName": "Book Name" *@
      </DataGridColumns>
    </DataGrid>
  </CardBody>
</Card>

<Modal @ref="@CreateModal">
  <ModalBackdrop />
  <ModalContent IsCentered="true" Size="ModalSize.Default">
    <Form>
      <ModalHeader>
        <ModalTitle>@L["NewBook"]</ModalTitle>
        <CloseButton Clicked="CloseCreateModalAsync" />
      </ModalHeader>
      <ModalBody>
        <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
          <Field>
            <FieldLabel>@L["BookAuthor"]</FieldLabel>
            <Select TValue="Guid" @bind-SelectedValue="@NewEntity.AuthorId">
              @* <SelectItem TValue="Guid" Value="Guid.Empty">@L["PickAnAuthor"]</SelectItem> *@
              @foreach (var item in authorList)
              {
                <SelectItem TValue="Guid" Value="@item.Id">
                    @item.Name
                </SelectItem>
              }
            </Select>
          </Field>
          
         
          <Validation MessageLocalizer="@LH.Localize">
            <Field>
              <FieldLabel>@L["BookName"]</FieldLabel>
              <TextEdit @bind-Text="@NewEntity.Name">
                <Feedback>
                  <ValidationError />
                </Feedback>
              </TextEdit>
            </Field>
          </Validation>
          <Field>
            <FieldLabel>@L["BookType"]</FieldLabel>
            <Select TValue="BookType" @bind-SelectedValue="@NewEntity.Type">
              @foreach (int value in Enum.GetValues(typeof(BookType)))
              {
                <SelectItem TValue="BookType" Value="@((BookType)value)">
                  @L[$"Enum:BookType.{value}"]
                </SelectItem>
              }
            </Select>
          </Field>
          <Field>
            <FieldLabel>@L["BookPublishDate"]</FieldLabel>
            <DateEdit TValue="DateTime" @bind-Date="@NewEntity.PublishDate" />
          </Field>

          <Field>
            <FieldLabel>@L["BookPrice"]</FieldLabel>
            <NumericEdit TValue="float" @bind-Value="@NewEntity.Price" />
          </Field>


        </Validations>
      </ModalBody>
      <ModalFooter>
        <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
        <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
          Clicked="CreateEntityAsync">@L["Save"]</Button>
      </ModalFooter>
    </Form>
  </ModalContent>
</Modal>

<Modal @ref="@EditModal">
  <ModalBackdrop />
  <ModalContent IsCentered="true" Size="ModalSize.Default">
    <ModalHeader>
      <ModalTitle>@EditingEntity.Name</ModalTitle>
      <CloseButton Clicked="CloseEditModalAsync" />
    </ModalHeader>
    <ModalBody>
      <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
        <Row>
          <Column ColumnSize="ColumnSize.Is12">
          <Field>
            <FieldLabel>@L["BookAuthor"]</FieldLabel>
            <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.AuthorId">
              @* <SelectItem TValue="Guid" Value="Guid.Empty">@L["PickAnAuthor"]</SelectItem> *@
              @foreach (var item in authorList)
              {
                <SelectItem TValue="Guid" Value="@item.Id">
                    @item.Name
                </SelectItem>
              }
            </Select>
          </Field>
          @* "BookAuthor": "Author", *@
          @* "PickAnAuthor": "Pick Name Author", *@
            <Validation MessageLocalizer="@LH.Localize">
              <Field>
                <FieldLabel>@L["BookName"]</FieldLabel>
                <TextEdit @bind-Text="EditingEntity.Name">
                  <Feedback>
                    <ValidationError />
                  </Feedback>
                </TextEdit>
              </Field>
            </Validation>

            <Field>
              <FieldLabel>@L["BookType"]</FieldLabel>
              <Select TValue="BookType" @bind-SelectedValue="@EditingEntity.Type">
                @foreach (int value in Enum.GetValues(typeof(BookType)))
                {
                  <SelectItem TValue="BookType" Value="@((BookType)value)">
                    @L[$"Enum:BookType.{value}"]
                  </SelectItem>
                }
              </Select>
            </Field>
            <Field>
              <FieldLabel>@L["BookPublishDate"]</FieldLabel>
              <DateEdit TValue="DateTime" @bind-Date="@EditingEntity.PublishDate" />
            </Field>
            <Field>
              <FieldLabel>@L["BookPrice"]</FieldLabel>
              <NumericEdit TValue="float" @bind-Value="@EditingEntity.Price" />
            </Field>
          </Column>
        </Row>
      </Validations>
    </ModalBody>
    <ModalFooter>
      <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
      <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
        Clicked="UpdateEntityAsync">@L["Save"]</Button>
    </ModalFooter>
  </ModalContent>
</Modal>


@code
{
  public Books()
  {
    CreatePolicyName = BookStoreAbpApiPermissions.Books.Create;
    UpdatePolicyName = BookStoreAbpApiPermissions.Books.Update;
    DeletePolicyName = BookStoreAbpApiPermissions.Books.Delete;
  }

  IReadOnlyList<AuthorLookupDto> authorList = Array.Empty<AuthorLookupDto>();

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    authorList = (await AppService.GetAuthorLookupAsync()).Items;
  }

  protected override async Task OpenCreateModalAsync()
  {
    if (!authorList.Any())
    {
      throw new UserFriendlyException(message: L["AnAuthorIsRequiredForCreatingBook"]);
    }

    await base.OpenCreateModalAsync();
    NewEntity.AuthorId = authorList.First().Id;
  }


}